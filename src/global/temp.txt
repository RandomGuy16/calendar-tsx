.calendar-day {
  position: relative;
  height: 100%; // or fixed height like 1440px for 24 hours

  .time-slot {
    position: relative;
    height: 60px; // 1 hour = 60px
    border-bottom: 1px solid #e0e0e0;

    &:nth-child(even) {
      background-color: #fafafa;
    }
  }

  .event {
    position: absolute;
    left: 0;
    right: 0;
    background-color: #4285f4;
    border: 1px solid #3367d6;
    border-radius: 4px;
    padding: 4px 8px;
    font-size: 12px;
    color: white;
    z-index: 1;

    &.overlapping {
      // When events overlap, make them narrower and offset
      width: calc(100% / var(--overlap-count));
      left: calc(100% / var(--overlap-count) * var(--overlap-index));
    }
  }
}

=================
======REACT======
=================

interface CalendarEvent {
  id: string;
  title: string;
  startTime: Date;
  endTime: Date;
  color?: string;
}

const PIXELS_PER_HOUR = 60;
const DAY_START_HOUR = 0; // 00:00

const CalendarDay = ({ events, date }: { events: CalendarEvent[]; date: Date }) => {
  const getEventStyle = (event: CalendarEvent, overlaps: CalendarEvent[]) => {
    const startHour = event.startTime.getHours() + event.startTime.getMinutes() / 60;
    const endHour = event.endTime.getHours() + event.endTime.getMinutes() / 60;

    const top = (startHour - DAY_START_HOUR) * PIXELS_PER_HOUR;
    const height = (endHour - startHour) * PIXELS_PER_HOUR;

    // Handle overlapping events
    const overlapIndex = overlaps.findIndex(e => e.id === event.id);
    const overlapCount = overlaps.length;

    return {
      top: `${top}px`,
      height: `${height}px`,
      width: overlapCount > 1 ? `${100 / overlapCount}%` : '100%',
      left: overlapCount > 1 ? `${(100 / overlapCount) * overlapIndex}%` : '0%',
      backgroundColor: event.color || '#4285f4',
      zIndex: overlapCount - overlapIndex, // Later events on top
    };
  };

  // Group overlapping events
  const getOverlappingEvents = (targetEvent: CalendarEvent) => {
    return events.filter(event => {
      const targetStart = targetEvent.startTime.getTime();
      const targetEnd = targetEvent.endTime.getTime();
      const eventStart = event.startTime.getTime();
      const eventEnd = event.endTime.getTime();

      return (
        (eventStart < targetEnd && eventEnd > targetStart) // Events overlap
      );
    });
  };

  // Create hour slots for visual reference
  const hourSlots = Array.from({ length: 24 }, (_, i) => i);

  return (
    <div className="calendar-day">
      {/* Time slots for visual reference */}
      {hourSlots.map(hour => (
        <div key={hour} className="time-slot">
          <span className="time-label">{hour}:00</span>
        </div>
      ))}

      {/* Events */}
      {events.map(event => {
        const overlappingEvents = getOverlappingEvents(event);
        return (
          <div
            key={event.id}
            className="event"
            style={getEventStyle(event, overlappingEvents)}
          >
            <div className="event-title">{event.title}</div>
            <div className="event-time">
              {event.startTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} -
              {event.endTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
            </div>
          </div>
        );
      })}
    </div>
  );
};